name: Countries
type: object
key: _id
data:
  fixed: 246
  pre_run: >
    globals.current_country_index = 0;
    if (inputs.countries) {
      globals.countries = inputs.countries;
    } else {
      globals.countries = [];
      chance.get('countries').forEach(function (v, i) {
        v.region_number = i;
        globals.countries.push(v);
      });
    }
properties:
  _id:
    type: string
    description: The document id
    data:
      post_build: "return 'country_' + this.countryCode;"
  gdp:
    type: integer
    description: The countries GDP
    data:
      build: "return faker.random.number({min: 1000, max: 75000})"
  countryCode:
    type: string
    description: The 2 letter ISO country code
    data:
      pre_build: >
        var abbreviation = globals.countries[globals.current_country_index].iso_2 || globals.countries[globals.current_country_index].countryCode;
        globals.current_country_index = globals.current_country_index + 1;
        return abbreviation;
  region-number:
    type: string
    description: The countries region number
    data:
      build: >
        var key = globals.countries.filter(function(v){
          return v.iso_2 === this.countryCode;
        })[0];
        return key.iso_m49 || key.region_number || chance.integer({min: 1, max: 999});
  name:
    type: string
    description: The name of the country
    data:
      build: >
        return globals.countries.filter(function(v){
          return v.iso_2 === this.countryCode;
        })[0].name || "";
  updated:
    type: string
    description: The date the country was last updated
    data:
      fake: "{{date.past}}"
      post_build: "return new Date(this.updated).toISOString();"
  population:
    type: integer
    description: The countries population
    data:
      build: "return faker.random.number()"
