{
  "extends": "airbnb-base",
  "parser": "babel-eslint",
  "plugins": ["fat-arrow-same-line", "flowtype"],
  "rules": {
    "flowtype/boolean-style": ["error", "boolean"],
    "flowtype/define-flow-type": "warn",
    "flowtype/delimiter-dangle": ["error", "never"],
    "flowtype/generic-spacing": ["error", "never"],
    "flowtype/no-primitive-constructor-types": "error",
    "flowtype/no-types-missing-file-annotation": "error",
    "flowtype/no-weak-types": "off",
    "flowtype/object-type-delimiter": ["error", "comma"],
    "flowtype/require-parameter-type": [
      "error",
      {
        "excludeParameterMatch":
          "^(resolve|reject|e|err|error|array|i|index|next)$|^_"
      }
    ],
    "flowtype/require-return-type": [
      "error",
      "always",
      {
        "excludeArrowFunctions": true,
        "annotateUndefined": "always",
        "excludeMatching": ["constructor"]
      }
    ],
    "flowtype/require-valid-file-annotation": "error",
    "flowtype/semi": ["error", "always"],
    "flowtype/space-after-type-colon": ["error", "always"],
    "flowtype/space-before-generic-bracket": ["error", "never"],
    "flowtype/space-before-type-colon": ["error", "never"],
    "flowtype/type-id-match": ["error", "^([A-Z][a-z0-9]+)+Type$"],
    "flowtype/union-intersection-spacing": ["error", "always"],
    "flowtype/use-flow-type": "warn",
    "flowtype/valid-syntax": "warn",
    "curly": ["error", "multi-line"],
    "no-case-declarations": "error",
    "accessor-pairs": ["error", { "getWithoutSet": true }],
    "complexity": ["error", 11],
    "no-param-reassign": "off",
    "no-unmodified-loop-condition": "error",
    "no-useless-call": "error",
    "no-warning-comments": [
      "warn",
      {
        "terms": ["@todo", "@fix", "@fixme"],
        "location": "start"
      }
    ],
    "require-await": "error",
    "yield-star-spacing": ["error", "before"],
    "arrow-body-style": "off",
    "arrow-parens": ["error", "always"],
    "fat-arrow-same-line/fat-arrow-same-line": "error",
    "generator-star-spacing": "error",
    "handle-callback-err": ["error", "^(e|err|error|.+Erro?r?)$"],
    "no-sync": "error",
    "array-bracket-newline": [
      "error",
      {
        "multiline": true,
        "minItems": 4
      }
    ],
    "array-element-newline": [
      "error",
      {
        "multiline": true,
        "minItems": 4
      }
    ],
    "array-bracket-spacing": ["error", "always"],
    "camelcase": "off",
    "no-restricted-syntax": [
      "error",
      {
        "selector": "ForInStatement",
        "message":
          "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array."
      },
      {
        "selector": "FunctionDeclaration[generator=true]",
        "message":
          "In 99.9% of cases you should be using async/await instead of a generator function"
      },
      {
        "selector": "LabeledStatement",
        "message":
          "Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand."
      },
      {
        "selector": "WithStatement",
        "message":
          "`with` is disallowed in strict mode because it makes code impossible to predict and optimize."
      }
    ],
    "id-length": [
      "warn",
      {
        "min": 2,
        "max": 50,
        "properties": "always",
        "exceptions": ["_", "$", "e", "i", "n", "a", "b"]
      }
    ],
    "id-match": [
      "error",
      "^(?:[a-z]{2,}([A-Z]{1}[a-z]+)*$)|([a-z_$]+$)|(sha1)"
    ],
    "line-comment-position": [
      "off",
      {
        "position": "above",
        "ignorePattern": ".{0,50}",
        "applyDefaultPatterns": true
      }
    ],
    "max-lines": [
      "error",
      {
        "max": 300,
        "skipBlankLines": true,
        "skipComments": true
      }
    ],
    "max-params": ["warn", 3],
    "max-statements-per-line": [
      "error",
      {
        "max": 1
      }
    ],
    "multiline-ternary": ["error", "never"],
    "newline-per-chained-call": [
      "error",
      {
        "ignoreChainWithDepth": 1
      }
    ],
    "no-multiple-empty-lines": [
      "error",
      {
        "max": 3,
        "maxEOF": 1
      }
    ],
    "semi": ["error", "never"],
    "spaced-comment": [
      "error",
      "always",
      {
        "line": {
          "markers": ["/", "#", "/#", "-", "+"],
          "exceptions": ["-", "+", "/", "#"]
        },
        "block": {
          "markers": ["!", "*#"],
          "exceptions": ["*", "#", "=", "!"],
          "balanced": true
        }
      }
    ],
    "space-before-function-paren": [
      "error",
      {
        "anonymous": "always",
        "named": "always",
        "asyncArrow": "always"
      }
    ],
    "no-undefined": "error",
    "consistent-return": "off",
    "import/extensions": "off",
    "no-underscore-dangle": "off"
  },
  "env": {
    "node": true
  },
  "overrides": [
    {
      "files": [
        "packages/*/test/**/*.test.js",
        "packages/*/fakeitfile.js",
        "packages/*/test/fixtures/**/*.js"
      ],
      "rules": {
        "import/no-extraneous-dependencies": "off",
        "id-length": "off",
        "no-shadow": "off",
        "flowtype/boolean-style": "off",
        "flowtype/define-flow-type": "off",
        "flowtype/delimiter-dangle": "off",
        "flowtype/generic-spacing": "off",
        "flowtype/no-primitive-constructor-types": "off",
        "flowtype/no-types-missing-file-annotation": "off",
        "flowtype/no-weak-types": "off",
        "flowtype/object-type-delimiter": "off",
        "flowtype/require-parameter-type": "off",
        "flowtype/require-return-type": "off",
        "flowtype/require-valid-file-annotation": "off",
        "flowtype/semi": "off",
        "flowtype/space-after-type-colon": "off",
        "flowtype/space-before-generic-bracket": "off",
        "flowtype/space-before-type-colon": "off",
        "flowtype/type-id-match": "off",
        "flowtype/union-intersection-spacing": "off",
        "flowtype/use-flow-type": "off",
        "flowtype/valid-syntax": "off",
        "newline-per-chained-call": [
          "error",
          {
            "ignoreChainWithDepth": 3
          }
        ],
        "max-lines": [
          "error",
          {
            "max": 600,
            "skipBlankLines": true,
            "skipComments": true
          }
        ]
      }
    }
  ]
}
